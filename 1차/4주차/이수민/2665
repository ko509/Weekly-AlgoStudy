import heapq

def find(x,y,total):
    global M
    heap = []
    heapq.heappush(heap, (x,y,total))
    
    while heap:
        
        x,y,total = heapq.heappop(heap)    
    
        if x == N-1 and y == N-1 :
            M = min(total, M)
            return
    
        for i in range(4):
            new_x, new_y = x+dx[i], y+dy[i]
            
            if not(0<=new_x<N and 0<=new_y<N):
                continue
            
            if visited[new_x][new_y] == 1:
                continue
            
            visited[new_x][new_y] = 1
            
            
            
            if S[new_x][new_y] == 0  : #검정색
                heapq.heappush(heap,(new_x,new_y,total+1))
            elif S[new_x][new_y] == 1 : #흰색
                heapq.heappush(heap,(new_x,new_y,total))
                
        

            


N = int(input())
S = []
dx = [1, -1, 0, 0]
dy = [0, 0, -1, 1]
M = float("inf")
visited = [[0 for _ in range(N)] for _ in range(N)]

for _ in range(N):
    S.append(list(map(int, list(input()))))

visited[0][0] = 1
find(0,0,0)
#print(visited)
print(M)
