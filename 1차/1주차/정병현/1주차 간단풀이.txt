1. N번째 큰 수

N번째 큰 수의 경우 원래라면 O(n) nth_element를 구하는 문제입니다. 이 문제를 해결하는 방법은 두 가지로, 랜덤을 이용하는 방법과, 랜덤을 이용하지 않는 방법이 있습니다.
랜덤을 이용하는 방법은 quick sort와 비슷한 방식으로 진행하되, pivot으로 고른 숫자가 k번째라고 하면, 그것보다 큰것 또는 작은것 중에서 탐색하는 방식입니다. 최악 O(n^2)이지만 이정도까지 되기까지의 확률이 매우 낮습니다.

랜덤을 이용하지 않는 방법은 median of medians방식이라고도 불리는 방식입니다. 전체 배열을 5개의 원소를 가진 배열로 쪼개, 각각을 정렬하고, 그 중앙값들의 중앙값의 위치를 이용해서 재귀적으로 해결하는 방식입니다. 최악O(n)이지만 상수가 매우 크고, 구현이 어렵습니다.

위의 경우 구현에 S1정도, 아래의 경우에는 구현에 g4정도라고 생각되지만 이 문제는 단순히 정렬을 이용하여 풀리므로 조금 저평가된 느낌이 있습니다.

2. 단지번호붙이기
 
단순한 DFS문제입니다. 각각의 크기를 재귀 또는 스택을 이용하여 구해 배열 또는 벡터에 넣고 정렬해서 출력하면 끝입니다.

3. 이모티콘 할인행사

백트래킹 문제입니다. 문제가 많이 복잡해보여 조금 해맸습니다만 제한이 매우 작아 가능해 보였습니다. 모든 경우를 확인하는데에 n*(m^4) <= 50*(7^4) < 50^3 = 125000으로 쉽게 했습니다.

pair라는 stl을 사용했습니다. 크기비교가 이미 오버로딩 되어있는 class이기때문에 편하게 사용했습니다.

4. 최고의 집합

약간의 그리디가 전부인 문제입니다. 고등학교 1학년때 배운 산술기하 부등식을 떠올리면 쉽게 구할 수 있었습니다.
가장 먼저 답이 -1인 경우는 s<n인 경우입니다. 따로 처리해주면 되겠습니다.
그 이외의 경우 산술기하부등식의 등호성립조건과 가장 비슷하게 만들어야하므로, 전부 s/n으로 배열을 채운 뒤, s%n만큼 뒤에서 +1을 해주시면 되겠습니다. 이에 대한 증명은 https://blog.naver.com/lovetaehong/130089819504를 참고해주시면 감사하겠습니다.